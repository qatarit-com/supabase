/*
  # Add Bots Management Logic

  1. New Tables
    - `bot_templates` - Predefined bot templates
    - `bot_posts` - Posts generated by bots
  
  2. Changes
    - Add new columns to `bots` table
    - Add RLS policies for bot management
    
  3. Functions
    - Bot creation and management functions
    - Post generation tracking
*/

-- Create bot templates table
CREATE TABLE IF NOT EXISTS bot_templates (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    name text NOT NULL,
    description text,
    personality text NOT NULL,
    topics text[] NOT NULL DEFAULT '{}',
    token_cost integer NOT NULL DEFAULT 50,
    created_at timestamptz NOT NULL DEFAULT now()
);

-- Create bot posts table
CREATE TABLE IF NOT EXISTS bot_posts (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    bot_id uuid REFERENCES bots(id) NOT NULL,
    content text NOT NULL,
    hashtags text[] NOT NULL DEFAULT '{}',
    engagement_score float DEFAULT 0,
    published_at timestamptz NOT NULL DEFAULT now(),
    created_at timestamptz NOT NULL DEFAULT now()
);

-- Add new columns to bots table
ALTER TABLE bots 
    ADD COLUMN IF NOT EXISTS status text NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'paused', 'archived')),
    ADD COLUMN IF NOT EXISTS daily_post_limit integer NOT NULL DEFAULT 5,
    ADD COLUMN IF NOT EXISTS last_post_at timestamptz,
    ADD COLUMN IF NOT EXISTS template_id uuid REFERENCES bot_templates(id);

-- Enable RLS
ALTER TABLE bot_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE bot_posts ENABLE ROW LEVEL SECURITY;

-- RLS Policies
CREATE POLICY "Bot templates are readable by all authenticated users"
    ON bot_templates FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Users can read their bots' posts"
    ON bot_posts FOR SELECT
    TO authenticated
    USING (EXISTS (
        SELECT 1 FROM bots 
        WHERE bots.id = bot_posts.bot_id 
        AND bots.owner_id = auth.uid()
    ));

-- Functions
CREATE OR REPLACE FUNCTION create_bot(
    p_owner_id uuid,
    p_name text,
    p_personality text,
    p_topics text[],
    p_template_id uuid DEFAULT NULL
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_bot_id uuid;
    v_token_cost integer;
BEGIN
    -- Get token cost
    SELECT COALESCE(token_cost, 50)
    INTO v_token_cost
    FROM bot_templates
    WHERE id = p_template_id;

    -- Check if user has enough tokens
    IF NOT check_token_balance(p_owner_id, v_token_cost) THEN
        RAISE EXCEPTION 'Insufficient tokens';
    END IF;

    -- Create bot
    INSERT INTO bots (
        owner_id,
        name,
        personality,
        topics,
        template_id,
        created_at
    )
    VALUES (
        p_owner_id,
        p_name,
        p_personality,
        p_topics,
        p_template_id,
        now()
    )
    RETURNING id INTO v_bot_id;

    -- Deduct tokens
    PERFORM use_tokens(
        p_owner_id,
        v_token_cost,
        'Created bot: ' || p_name
    );

    RETURN v_bot_id;
END;
$$;

-- Insert default bot templates
INSERT INTO bot_templates (name, description, personality, topics, token_cost)
VALUES
    ('Tech News Bot', 'Stays up-to-date with the latest technology news', 'professional', ARRAY['Technology', 'Innovation', 'AI'], 50),
    ('AI Enthusiast', 'Focuses on artificial intelligence and machine learning', 'enthusiastic', ARRAY['AI', 'Machine Learning', 'Data Science'], 50),
    ('Crypto Tracker', 'Monitors and reports on cryptocurrency trends', 'analytical', ARRAY['Cryptocurrency', 'Blockchain', 'Finance'], 50)
ON CONFLICT DO NOTHING;